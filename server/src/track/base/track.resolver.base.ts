/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTrackArgs } from "./CreateTrackArgs";
import { UpdateTrackArgs } from "./UpdateTrackArgs";
import { DeleteTrackArgs } from "./DeleteTrackArgs";
import { TrackFindManyArgs } from "./TrackFindManyArgs";
import { TrackFindUniqueArgs } from "./TrackFindUniqueArgs";
import { Track } from "./Track";
import { LessonFindManyArgs } from "../../lesson/base/LessonFindManyArgs";
import { Lesson } from "../../lesson/base/Lesson";
import { TrackService } from "../track.service";

@graphql.Resolver(() => Track)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class TrackResolverBase {
  constructor(
    protected readonly service: TrackService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Track",
    action: "read",
    possession: "any",
  })
  async _tracksMeta(
    @graphql.Args() args: TrackFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Track])
  @nestAccessControl.UseRoles({
    resource: "Track",
    action: "read",
    possession: "any",
  })
  async tracks(@graphql.Args() args: TrackFindManyArgs): Promise<Track[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Track, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Track",
    action: "read",
    possession: "own",
  })
  async track(
    @graphql.Args() args: TrackFindUniqueArgs
  ): Promise<Track | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Track)
  @nestAccessControl.UseRoles({
    resource: "Track",
    action: "create",
    possession: "any",
  })
  async createTrack(@graphql.Args() args: CreateTrackArgs): Promise<Track> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Track)
  @nestAccessControl.UseRoles({
    resource: "Track",
    action: "update",
    possession: "any",
  })
  async updateTrack(
    @graphql.Args() args: UpdateTrackArgs
  ): Promise<Track | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Track)
  @nestAccessControl.UseRoles({
    resource: "Track",
    action: "delete",
    possession: "any",
  })
  async deleteTrack(
    @graphql.Args() args: DeleteTrackArgs
  ): Promise<Track | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Lesson])
  @nestAccessControl.UseRoles({
    resource: "Lesson",
    action: "read",
    possession: "any",
  })
  async lessons(
    @graphql.Parent() parent: Track,
    @graphql.Args() args: LessonFindManyArgs
  ): Promise<Lesson[]> {
    const results = await this.service.findLessons(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
